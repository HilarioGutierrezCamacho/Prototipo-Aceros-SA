@page "/nuevo-articulo"
@page "/editar-articulo/{IdArticulo}"

@using System.Text.RegularExpressions
@using PrototipoAcerosSA.Data
@using PrototipoAcerosSA.Models
@inject ModalService _modalService
@inject ConfirmService _confirmService
@inject NavigationManager UriHelper

<style>
    .about-section {
        padding: 20px;
        text-align: center;
        background-color: #474e5d;
        color: white;
        width: 100%;
    }
</style>

<div class="about-section">
    <h3 style="color: white;">Nuevo Articulo</h3>
</div>

<br />

<div style="background-color: #ffffff; padding: 20px;">
    <div style="background: #ffffff; padding: 20px; border-radius: 5px; width: 100%;">
        <EditForm Model="@FormArticulo"  OnValidSubmit="@AddArticulo">
            <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator />
            <Card Bordered="true" Style="align-self: center;">
                <Body>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Clave del Articulo: </label>
                            <InputText id="lastName" class="form-control col-sm-12" @bind-Value="@FormArticulo.Clave" placeholder="Ingresa el folio"></InputText>
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormArticulo.Clave)" />
                        </div>
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Descripción: </label>
                            <InputText id="lastName" class="form-control col-sm-12" @bind-Value="@FormArticulo.Descripcion" placeholder="Ingresa la descripción"></InputText>
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormArticulo.Descripcion)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Marca: </label>
                            <InputText id="lastName" class="form-control col-sm-12" @bind-Value="@FormArticulo.Marca" placeholder="Ingresa la marca"></InputText>
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormArticulo.Marca)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Almacen: </label>
                            <Select DataSource="@almacenes"
                                    @bind-Value="@FormArticulo.IdAlmacen"
                                    DefaultValue="@(0)"
                                    ValueName="@nameof(Almacen.IdAlmacen)"
                                    LabelName="@nameof(Almacen.Nombre)">
                            </Select>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Ubicación: </label>
                            <Select DataSource="@ubicaciones"
                                    @bind-Value="@FormArticulo.IdUbicacion"
                                    DefaultValue="@(0)"
                                    ValueName="@nameof(Ubicacion.IdUbicacion)"
                                    LabelName="@nameof(Ubicacion.Nombre)">
                            </Select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Unidad: </label>
                            <Select DataSource="@unidades"
                                    @bind-Value="@FormArticulo.IdUnidad"
                                    DefaultValue="@(0)"
                                    ValueName="@nameof(Unidad.IdUnidad)"
                                    LabelName="@nameof(Unidad.Nombre)">
                            </Select>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Precio Unitario: </label>
                            <AntDesign.InputNumber Formatter="FormatoPesos" Parser="ParseoPesos" @bind-Value="@FormArticulo.PrecioUnitario" style="margin: 2px; width: 100%;" />
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormArticulo.PrecioUnitario)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            <label for="lastName" class="col-sm-4">Maximo: </label>
                            <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control" @bind-Value="@FormArticulo.Maximo" style="margin: 2px;"></Microsoft.AspNetCore.Components.Forms.InputNumber>
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormArticulo.Maximo)" />
                        </div>
                        <div class="form-group col-md-4">
                            <label for="lastName" class="col-sm-4">Minimo: </label>
                            <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control col-sm-12" @bind-Value="@FormArticulo.Minimo" style="margin: 2px;" />
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormArticulo.Minimo)" />
                        </div>
                        <div class="form-group col-md-4">
                            <label for="lastName" class="col-sm-6">Punto Reorden: </label>
                            <Microsoft.AspNetCore.Components.Forms.InputNumber class="form-control col-sm-12" @bind-Value="@FormArticulo.PuntoReorden" style="margin: 2px;" />
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormArticulo.PuntoReorden)" />
                        </div>
                    </div>
                </Body>
                <ActionTemplate>
                    @if (!Editar)
                    {
                        <CardAction>
                            <Button class="w-50" Type="@ButtonType.Primary" HtmlType="submit">
                                Guardar
                            </Button>
                        </CardAction> 
                    }
                    else
                    {
                        <CardAction>
                            <Button class="w-50" Type="@ButtonType.Primary" HtmlType="submit">
                                Editar
                            </Button>
                        </CardAction>                    
                    }
                    <CardAction Style="color: red;"><Icon Style="color: red;" Type="rollback" Theme="outline" OnClick="@(()=>{ _visible = true; })" /> Cancelar</CardAction>
                </ActionTemplate>
            </Card>
        </EditForm>
    </div>
</div>

<Modal Title="@("Cancelar Operación")"
       Visible="@_visible"
       OnOk="@RegresarListadoArticulos"
       OnCancel="@CerrarModal"
       OkText="TextoSalir"
       CancelText="TextoCerrar">
    <p>Deseas cancelar la operación?</p>
    <p>Al salir se perdera la información registrada en el formulario.</p>
</Modal>

@code { 

    [Inject]
    private IArticuloService articuloService { get; set; }

    public class Almacen
    {
        public int IdAlmacen { get; set; }
        public string Nombre { get; set; }
    }

    public class Ubicacion
    {
        public int IdUbicacion { get; set; }
        public string Nombre { get; set; }
    }

    public class Unidad
    {
        public int IdUnidad { get; set; }
        public string Nombre { get; set; }
    }

    public Articulo FormArticulo = new Articulo();
    public List<Almacen> almacenes = new List<Almacen>();
    public List<Ubicacion> ubicaciones = new List<Ubicacion>();
    public List<Unidad> unidades = new List<Unidad>();

    public string title = "Cancelar Ingreso de Articulo";
    public bool _visible = false;
    public string TextoSalir = "Salir";
    public string TextoCerrar = "Cerrar";
    public bool Editar = false;

    [Parameter]
    public string IdArticulo { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {

        almacenes.Add(new Almacen() { IdAlmacen = 0, Nombre = "Seleccione.." });
        almacenes.Add(new Almacen() { IdAlmacen = 1, Nombre = "MP" });
        almacenes.Add(new Almacen() { IdAlmacen = 2, Nombre = "VA" });
        almacenes.Add(new Almacen() { IdAlmacen = 3, Nombre = "RF" });

        ubicaciones.Add(new Ubicacion() { IdUbicacion = 0, Nombre = "Seleccione.." });
        ubicaciones.Add(new Ubicacion() { IdUbicacion = 1, Nombre = "001 - Estante 1" });
        ubicaciones.Add(new Ubicacion() { IdUbicacion = 2, Nombre = "001 - Estante 2" });
        ubicaciones.Add(new Ubicacion() { IdUbicacion = 3, Nombre = "001 - Estante 3" });

        unidades.Add(new Unidad() { IdUnidad = 0, Nombre = "Seleccione.." });
        unidades.Add(new Unidad() { IdUnidad = 1, Nombre = "Pieza" });
        unidades.Add(new Unidad() { IdUnidad = 2, Nombre = "Caja" });
        unidades.Add(new Unidad() { IdUnidad = 3, Nombre = "Botella" });

        if (IdArticulo != "" && IdArticulo != null)
        {
            int Id = Int32.Parse(IdArticulo);
            FormArticulo = await articuloService.GetArticuloById(Id);
            Editar = true;
        }

    }


    private string FormatoPesos(double value)
    {
        return "$ " + value.ToString("n0");
    }

    private string ParseoPesos(string value)
    {
        return Regex.Replace(value, @"\$\s?|(,*)", "");
    }

    public async Task AddArticulo()
    {
        if (!Editar)
        {
            await articuloService.AddArticulo(FormArticulo);
            var arts = await articuloService.GetTodosArticulos();
            await _modalService.SuccessAsync(new ConfirmOptions()
            {
                Content = "Exito al registrar el articulo."
            });
            UriHelper.NavigateTo($"listado-articulos");
        } else
        {
            await articuloService.EditarArticulo(FormArticulo);
            var arts = await articuloService.GetTodosArticulos();
            await _modalService.SuccessAsync(new ConfirmOptions()
            {
                Content = "Exito al editar el articulo."
            });
            UriHelper.NavigateTo($"listado-articulos");
        }

    }

    private async Task RegresarListadoArticulos(MouseEventArgs e)
    {
        _visible = false;
        UriHelper.NavigateTo($"listado-articulos");
    }

    private void CerrarModal(MouseEventArgs e)
    {
        _visible = false;
    }

}
