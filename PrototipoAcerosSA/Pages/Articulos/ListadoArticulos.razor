@page "/listado-articulos"
@using System.ComponentModel
@using AntDesign.TableModels
@using PrototipoAcerosSA.Data
@using PrototipoAcerosSA.Models
@inject MessageService _message
@inject ConfirmService _confirmService
@inject ModalService _modalService
@inject NavigationManager UriHelper


<style>
    .about-section {
        padding: 20px;
        text-align: center;
        background-color: #474e5d;
        color: white;
        width: 100%;
    }
</style>

<div class="about-section">
    <h3 style="color: white;">Consulta de Articulos</h3>
</div>

<br />
<br />

<Row Gutter="8">
    <Col Span="2">
    <label style="margin: 1px;">Buscar por:</label>
    </Col>
    <Col Span="3">
    <Select @bind-Value="@buscar_por"
            Style="width: 120px; margin: 1px;"
            TItemValue="string"
            TItem="string">
        <SelectOptions>
            <SelectOption TItemValue="string" TItem="string" Value="@("Clave")" Label="Clave" />
            <SelectOption TItemValue="string" TItem="string" Value="@("Nombre")" Label="Nombre" />
        </SelectOptions>
    </Select>
    </Col>
    <Col Span="5">
    <Search Style="margin: 1px;" Placeholder="Introduce tu búsqueda..." Size="@InputSize.Default" @bind-Value="@filtro" OnSearch="FiltrarArticulos" />
    </Col>
</Row>

<hr />

<Button Icon="form" Type="primary" OnClick="() => NavegarNuevoArticulo()">
    Agregar Nuevo Articulo
</Button>

<br />
<br />

<Table @ref="table"
       TItem="Articulo"
       DataSource="@articulos"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       Context="articulo">
    <AntDesign.Column @bind-Field="@articulo.Clave" Sortable />
    <AntDesign.Column @bind-Field="@articulo.Descripcion" Sortable />
    <AntDesign.Column @bind-Field="@articulo.Marca" Sortable />
    <AntDesign.Column @bind-Field="@articulo.Almacen" Sortable />
    <AntDesign.Column @bind-Field="@articulo.Ubicacion" Sortable />
    <AntDesign.Column Title="Unidad" @bind-Field="@articulo.Unidad">
        <label>@articulo.Unidad.Descripcion</label>
    </AntDesign.Column>
    <AntDesign.Column @bind-Field="@articulo.PrecioUnitario" Sortable />
    <ActionColumn Title="Acciones">
        <Button Icon="delete" Danger OnClick="() => EliminarArticulo(articulo.IdArticulo)">
            Eliminar
        </Button>
        <Button Icon="edit" Type="primary" OnClick="() => NavegarEditarArticulo(articulo.IdArticulo)">
            Editar
        </Button>
    </ActionColumn>
</Table>

<br />
<p>Pagina Actual: @_pageIndex | Articulos por Página: @_pageSize | Total: @_total</p>

@code {

    [Inject]
    private IArticuloService articuloService { get; set; }

    List<Articulo> articulos { get; set; } = new List<Articulo>();
    List<Articulo> todos { get; set; } = new List<Articulo>();
    List<Articulo> articulosFiltrados { get; set; } = new List<Articulo>();

    ITable table;
    int _pageIndex = 1;
    int _pageSize = 5;
    int _total = 0;

    string buscar_por = "Clave";
    string filtro = "";

    public string title = "Cancelar Ingreso de Articulo";
    public bool _visible = false;
    public string TextoSalir = "Salir";
    public string TextoCerrar = "Cerrar";

    RenderFragment icon = @<Icon Type="exclamation-circle" Theme="outline"></Icon>;

    RenderFragment BotonSi = @<label>Si</label>;
    RenderFragment BotonNo = @<label>No</label>;

    protected override async Task OnInitializedAsync()
    {
        articulos = await articuloService.GetTodosArticulos();
        _total = articulos.Count();
        todos = articulos;
    }

    public void FiltrarArticulos()
    {
        articulosFiltrados = new List<Articulo>();
        if (filtro != null && filtro.Length > 0)
        {
            foreach (var articulo in articulos)
            {
                if (buscar_por == "Clave")
                {
                    if (articulo.Clave.Contains(filtro.Trim()))
                    {
                        articulosFiltrados.Add(articulo);
                    }
                }
                else
                {
                    if (articulo.Descripcion.Contains(filtro.Trim()))
                    {
                        articulosFiltrados.Add(articulo);
                    }
                }
            }
            articulos = articulosFiltrados;
        }
        else
        {
            articulos = todos;
        }
    }

    public async Task EliminarArticulo(int IdArticulo)
    {
        var content = "Deseas eliminar este articulo?";
        var title = "Eliminar";
        var confirmResult =
            await _confirmService.Show(
                content,
                title,
                ConfirmButtons.YesNo,
                ConfirmIcon.Warning,
                new ConfirmButtonOptions()
                {
                    Button1Props = new AntDesign.ButtonProps()
                    {
                        Type = AntDesign.ButtonType.Primary,
                        ChildContent = BotonSi
                    },
                    Button2Props = new AntDesign.ButtonProps()
                    {
                        ChildContent = BotonNo
                    }
                }
            );

        if (confirmResult == AntDesign.ConfirmResult.Yes)
        {
            await articuloService.EliminarArticulo(IdArticulo);
            await _modalService.SuccessAsync(new ConfirmOptions()
            {
                Content = "Eliminación Exitosa."
            });
            articulos = await articuloService.GetTodosArticulos();
            _total = articulos.Count();
            todos = articulos;
        }

    }

    public void NavegarEditarArticulo(int IdArticulo)
    {
        UriHelper.NavigateTo($"editar-articulo/{IdArticulo}");
    }

    public void NavegarNuevoArticulo()
    {
        UriHelper.NavigateTo($"nuevo-articulo");
    }

}
