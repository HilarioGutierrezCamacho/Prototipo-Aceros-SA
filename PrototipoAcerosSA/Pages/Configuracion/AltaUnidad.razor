@page "/nueva-unidad"
@page "/editar-unidad/{IdUnidad}"

@using System.Text.RegularExpressions
@using PrototipoAcerosSA.Data
@using System.ComponentModel.DataAnnotations;
@inject NavigationManager UriHelper
@inject IJSRuntime js

<div style="background-color: #ffffff; padding: 20px;">
    <div style="background: #ffffff; padding: 20px; border-radius: 5px; width: 100%;">
        <EditForm Model="@FormUnidad" OnValidSubmit="@AgregarUnidad">
            <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator />
            <Card Bordered="true" Style="align-self: center;">
                <Body>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Clave: </label>
                            <InputText id="lastName" class="form-control col-sm-12" @bind-Value="@FormUnidad.Clave" placeholder="Ingresa la clave"></InputText>
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormUnidad.Clave)" />
                        </div>
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Nombre: </label>
                            <InputText id="lastName" class="form-control col-sm-12" @bind-Value="@FormUnidad.Nombre" placeholder="Ingresa el nombre"></InputText>
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormUnidad.Nombre)" />
                        </div>
                    </div>
                    <div class="row">

                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Estatus: </label>
                            <Select DataSource="@est"
                                    Placeholder="Selecciona..."
                                    @bind-Value="@FormUnidad.Estatus"
                                    ValueName="@nameof(Estatus.Nombre)"
                                    LabelName="@nameof(Estatus.Nombre)">
                            </Select>
                        </div>

                    </div>
                </Body>
                <ActionTemplate>
                    @if (Titulo == "Nueva Unidad")
                    {
                        <CardAction>
                            <Button class="w-50" Type="@ButtonType.Primary" HtmlType="submit">
                                Guardar
                            </Button>
                        </CardAction>
                    }
                    else
                    {
                        <CardAction>
                            <Button class="w-50" Type="@ButtonType.Primary" HtmlType="submit">
                                Guardar
                            </Button>
                        </CardAction>
                    }
                    <CardAction Style="color: red;">
                        <Button class="w-50" Danger OnClick="() => Cancelar()">
                            <Icon Style="color: red;" Type="rollback" Theme="outline" /> Cancelar
                        </Button>
                    </CardAction>
                </ActionTemplate>
            </Card>
        </EditForm>
    </div>
</div>

@code { [Inject]
    private IUnidadService unidadService { get; set; }

    public class Unidad
    {
        public int IdUnidad { get; set; }
        [Required(ErrorMessage = "Campo requerido.")]
        [StringLength(7, ErrorMessage = "La clave debe contener solo 7 caracteres, 3 letras mayusculas, un guion y tres números (Ejemplo CAJ-001)")]
        public string Clave { get; set; }
        [Required(ErrorMessage = "Campo requerido.")]
        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "Ingresa solo letras")]
        public string Nombre { get; set; }
        [Required(ErrorMessage = "Campo requerido.")]
        public string Estatus { get; set; }
    }

    public string opcion = "Seleccione...";
    public string Titulo = "Nueva Unidad";
    public Unidad FormUnidad = new Unidad();
    public List<Unidad> unidades = new List<Unidad>();

    [Parameter]
    public string IdUnidad { get; set; } = "";

    public class Estatus
    {
        public int IdEstatus { get; set; }
        public string Nombre { get; set; }
    }

    public Estatus estatus = new Estatus();
    public List<Estatus> est = new List<Estatus>();

    protected override async Task OnInitializedAsync()
    {
        est.Add(new Estatus() { IdEstatus = 1, Nombre = "Activo" });
        est.Add(new Estatus() { IdEstatus = 1, Nombre = "Inactivo" });

        try
        {
            var valor = int.Parse(IdUnidad);
            if (valor > 0)
            {
                await ObtenerUnidad();
                Titulo = "Editar Unidad";
            }
        }
        catch (Exception)
        {

        }



    }


    private string FormatoPesos(double value)
    {
        return "$ " + value.ToString("n0");
    }


    private string ParseoPesos(string value)
    {
        return Regex.Replace(value, @"\$\s?|(,*)", "");
    }

    public async Task AddUnidad()
    {
        await js.InvokeAsync<bool>("confirmarGuardar", "¡Exito al guardar!", "success");
        await unidadService.AddUnidad(
        FormUnidad.Clave,
        FormUnidad.Nombre,
        FormUnidad.Estatus);
        var arts = await unidadService.GetTodosUnidades();
        UriHelper.NavigateTo($"listado-unidades");
    }

    public async Task ObtenerUnidad()
    {
        var valor = int.Parse(IdUnidad);
        var dto = await unidadService.GetAlmacenById(valor);
        FormUnidad.IdUnidad = dto.IdUnidad;
        FormUnidad.Clave = dto.Clave;
        FormUnidad.Nombre = dto.Nombre;
        FormUnidad.Estatus = dto.Estatus;
        if (dto.Estatus == "Activo")
        {
            opcion = "Activo";
        }
        else
        {
            opcion = "Inactivo";
        }
        unidades.Add(new Unidad() { IdUnidad = dto.IdUnidad, Clave = dto.Clave, Nombre = dto.Nombre, Estatus = dto.Estatus });

    }

    public async Task UpdateUnidad()
    {
        await js.InvokeAsync<bool>("confirmarGuardar", "¡Modificación exitosa!", "success");
        await unidadService.UpdateUnidad(
        FormUnidad.IdUnidad,
        FormUnidad.Clave,
        FormUnidad.Nombre,
        FormUnidad.Estatus);
        var arts = await unidadService.GetTodosUnidades();
        UriHelper.NavigateTo($"listado-unidades");
    }
    public async Task Cancelar()
    {
        var arts = await unidadService.GetTodosUnidades();
        UriHelper.NavigateTo($"listado-unidades");
    }
    public async Task AgregarUnidad()
    {
        if (Titulo == "Nueva Unidad")
        {
            await AddUnidad();
        }
        else
        {
            await UpdateUnidad();
        }
    }
}
