@page "/detalle-unidad/{IdUnidad}"

@using System.Text.RegularExpressions
@using PrototipoAcerosSA.Data
@inject NavigationManager UriHelper
@inject IJSRuntime js

<style>
    .about-section {
        padding: 20px;
        text-align: center;
        background-color: #474e5d;
        color: white;
        width: 100%;
    }
</style>

<div class="about-section">
    <h3 style="color: white;">@Titulo</h3>
</div>

<br />
<div style="background-color: #ffffff; padding: 20px;">
    <div style="background: #ffffff; padding: 20px; border-radius: 5px; width: 100%;">
        <Form Model="@FormUnidad">
            <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator />
            <Card Bordered="true" Style="align-self: center;">
                <Body>
                    <Row Gutter="24">
                        <Col Span="8">
                        <FormItem Label="Clave:" LabelCol="new ColLayoutParam { Span = 24 }" WrapperCol="new ColLayoutParam { Span = 24 }" style="margin: 2px;">
                            <Input @bind-Value="@FormUnidad.Clave" style="margin: 2px;" disabled />
                        </FormItem>
                        </Col>
                        <Col Span="16">
                        <FormItem Label="Nombre:" LabelCol="new ColLayoutParam { Span = 24 }" WrapperCol="new ColLayoutParam { Span = 24 }" style="margin: 2px;">
                            <Input @bind-Value="@FormUnidad.Nombre" style="margin: 2px;" disabled/>
                        </FormItem>
                        </Col>
                    </Row>
                    <Row Gutter="24">
                        <Col Span="8">
                        <FormItem Label="Estatus:" LabelCol="new ColLayoutParam { Span = 24 }" WrapperCol="new ColLayoutParam { Span = 24 }" style="margin: 2px;">
                            <Select DataSource="@est"
                                    DefaultValue="@opcion"
                                    @bind-Value="@FormUnidad.Estatus"
                                    ValueName="@nameof(Estatus.Nombre)"
                                    LabelName="@nameof(Estatus.Nombre)"
                                    disabled>
                            </Select>
                        </FormItem>
                        </Col>
                        <Col Span="16">
                        <FormItem Label="Descripción:" LabelCol="new ColLayoutParam { Span = 24 }" WrapperCol="new ColLayoutParam { Span = 24 }" style="margin: 2px;">
                            <Input @bind-Value="@FormUnidad.Descripcion" style="margin: 2px;" disabled />
                        </FormItem>
                        </Col>
                    </Row>

                </Body>
                <ActionTemplate>
                    <CardAction Style="color: red;"><Icon Style="color: red;" Type="rollback" Theme="outline" OnClick="() => Cancelar()" /> Regresar</CardAction>
                </ActionTemplate>
            </Card>
        </Form>
    </div>
</div>

@code { [Inject]
    private IUnidadService unidadService { get; set; }

    public class Unidad
    {
        public int IdUnidad { get; set; }
        public string Clave { get; set; }
        public string Nombre { get; set; }
        public string Descripcion { get; set; }
        public string Estatus { get; set; }
    }

    public string opcion = "Seleccione...";
    public string Titulo = "Detalle Unidad";
    public Unidad FormUnidad = new Unidad();
    public List<Unidad> unidades = new List<Unidad>();

    [Parameter]
    public string IdUnidad { get; set; } = "";

    public class Estatus
    {
        public int IdEstatus { get; set; }
        public string Nombre { get; set; }
    }

    public Estatus estatus = new Estatus();
    public List<Estatus> est = new List<Estatus>();

    protected override async Task OnInitializedAsync()
    {
        est.Add(new Estatus() { IdEstatus = 0, Nombre = "Seleccione.." });
        est.Add(new Estatus() { IdEstatus = 1, Nombre = "Activo" });
        est.Add(new Estatus() { IdEstatus = 1, Nombre = "Inactivo" });

        await ObtenerUnidad();
    }


    private string FormatoPesos(double value)
    {
        return "$ " + value.ToString("n0");
    }


    private string ParseoPesos(string value)
    {
        return Regex.Replace(value, @"\$\s?|(,*)", "");
    }

    public async Task AddUnidad()
    {
        await js.InvokeAsync<bool>("confirmarGuardar", "¡Exito al guardar!", "success");
        await unidadService.AddUnidad(
        FormUnidad.Clave,
        FormUnidad.Nombre,
        FormUnidad.Descripcion,
        FormUnidad.Estatus);
        var arts = await unidadService.GetTodosUnidades();
        UriHelper.NavigateTo($"listado-unidades");
    }

    public async Task ObtenerUnidad()
    {
        var valor = int.Parse(IdUnidad);
        var dto = await unidadService.GetAlmacenById(valor);
        FormUnidad.IdUnidad = dto.IdUnidad;
        FormUnidad.Clave = dto.Clave;
        FormUnidad.Nombre = dto.Nombre;
        FormUnidad.Descripcion = dto.Descripcion;
        FormUnidad.Estatus = dto.Estatus;
        if (dto.Estatus == "Activo")
        {
            opcion = "Activo";
        }
        else
        {
            opcion = "Inactivo";
        }
        unidades.Add(new Unidad() { IdUnidad = dto.IdUnidad, Clave = dto.Clave, Nombre = dto.Nombre, Descripcion = dto.Descripcion, Estatus = dto.Estatus });

    }

    public async Task UpdateUnidad()
    {
        await js.InvokeAsync<bool>("confirmarGuardar", "¡Modificación exitosa!", "success");
        await unidadService.UpdateUnidad(
        FormUnidad.IdUnidad,
        FormUnidad.Clave,
        FormUnidad.Nombre,
        FormUnidad.Descripcion,
        FormUnidad.Estatus);
        var arts = await unidadService.GetTodosUnidades();
        UriHelper.NavigateTo($"listado-unidades");
    }
    public async Task Cancelar()
    {
        var arts = await unidadService.GetTodosUnidades();
        UriHelper.NavigateTo($"listado-unidades");
    }

}
