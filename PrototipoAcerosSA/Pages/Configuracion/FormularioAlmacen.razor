@page "/nuevo-almacen"
@page "/editar-almacen/{IdAlmacen}"

@using System.Text.RegularExpressions
@using PrototipoAcerosSA.Data
@using PrototipoAcerosSA.Models
@using System.ComponentModel.DataAnnotations;
@inject NavigationManager UriHelper
@inject IJSRuntime js


<div style="background-color: #ffffff; padding: 20px;">
    <div style="background: #ffffff; padding: 20px; border-radius: 5px; width: 100%;">
        <EditForm Model="@FormAlmacen" OnValidSubmit="@AgregarAlmacen">
            <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator />
            <Card Bordered="true" Style="align-self: center;">
                <Body>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Clave: </label>
                            <InputText id="lastName" class="form-control col-sm-12" @bind-Value="@FormAlmacen.Clave" placeholder="Ingresa la clave"></InputText>
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormAlmacen.Clave)" />
                        </div>
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Nombre: </label>
                            <InputText id="lastName" class="form-control col-sm-12" @bind-Value="@FormAlmacen.Nombre" placeholder="Ingresa el nombre"></InputText>
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormAlmacen.Nombre)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            <label for="lastName" class="col-sm-4">Alto: </label>
                            <AntDesign.InputNumber @bind-Value="@FormAlmacen.Alto" style="margin: 2px; width: 100%;" />
                                <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormAlmacen.Alto)" />
                        </div>
                        <div class="form-group col-md-4">
                            <label for="lastName" class="col-sm-4">Ancho: </label>
                            <AntDesign.InputNumber @bind-Value="@FormAlmacen.Ancho" style="margin: 2px; width: 100%;" />
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormAlmacen.Ancho)" />
                        </div>
                        <div class="form-group col-md-4">
                            <label for="lastName" class="col-sm-4">Largo: </label>
                            <AntDesign.InputNumber   @bind-Value="@FormAlmacen.Largo" style="margin: 2px; width: 100%;" />
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormAlmacen.Largo)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Tipo de Almacen: </label>
                            <Select DataSource="@est"
                                    DefaultValue="@opcion"
                                    @bind-Value="@FormAlmacen.Estatus"
                                    ValueName="@nameof(Estatus.Nombre)"
                                    LabelName="@nameof(Estatus.Nombre)">
                            </Select>
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormAlmacen.IdAlmacen)" />
                        </div>
                        <div class="form-group col-md-6">
                            <label for="lastName" class="col-sm-4">Descripción: </label>
                            <InputText @bind-Value="@FormAlmacen.Descripcion" Min="0" style="margin: 2px; width: 100%;" />
                            <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FormAlmacen.Descripcion)" />
                        </div>
                    </div>
                </Body>
                <ActionTemplate>
                    @if (Titulo == "Nuevo Almacen")
                    {
                        <CardAction>
                            <Button class="w-50" Type="@ButtonType.Primary" HtmlType="submit">
                                Guardar
                            </Button>
                        </CardAction>
                    }
                    else
                    {
                        <CardAction>
                            <Button class="w-50" Type="@ButtonType.Primary" HtmlType="submit">
                                Guardar
                            </Button>
                        </CardAction>
                    }
                    <CardAction Style="color: red;">
                        <Button class="w-50" Danger OnClick="() => Cancelar()">
                            <Icon Style="color: red;" Type="rollback" Theme="outline" /> Cancelar
                        </Button>
                    </CardAction>
                </ActionTemplate>
            </Card>
        </EditForm>
    </div>
</div>

@code { [Inject]
    private IAlmacenService almacenService { get; set; }

    public class Almacenn
    {
        public int IdAlmacen { get; set; }
        [Required(ErrorMessage = "Campo requerido.")]
        //[RegularExpression(@"^[A-Z]+[0-9]*$", ErrorMessage = "La clave debe ser 2 letras mayusculas, un guion y tres numeros (Ejemplo MP-001)")]
        [StringLength(6, ErrorMessage = "La clave debe contener solo 6 caracteres, 2 letras mayusculas, un guion y tres números (Ejemplo MP-001)")]
        public string Clave { get; set; }
        [Required(ErrorMessage = "Campo requerido.")]
        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "Ingresa solo letras")]
        public string Nombre { get; set; }
        [Required(ErrorMessage = "Campo requerido.")]
        [Range(1, int.MaxValue, ErrorMessage = "El valor debe ser mayor a 0")]
        public int Ancho { get; set; }
        [Required(ErrorMessage = "Campo requerido.")]
        [Range(1, int.MaxValue, ErrorMessage = "El valor debe ser mayor a 0")]
        public int Largo { get; set; }
        [Required(ErrorMessage = "Campo requerido.")]
        [Range(1, int.MaxValue, ErrorMessage = "El valor debe ser mayor a 0")]
        public int Alto { get; set; }
        [Required(ErrorMessage = "Campo requerido.")]
        [Range(1, int.MaxValue, ErrorMessage = "Debes seleccionar una opción.")]
        public string Estatus { get; set; }
        public string Descripcion { get; set; }
    }

    public string opcion = "Seleccione...";
    public string Titulo = "Nuevo Almacen";
    public string Clave = "";
    public Almacenn FormAlmacen = new Almacenn();
    public List<Almacenn> almacenes = new List<Almacenn>();

    [Parameter]
    public string IdAlmacen { get; set; } = "";

    public class Estatus
    {
        public int IdEstatus { get; set; }
        public string Nombre { get; set; }
    }

    public Estatus estatus = new Estatus();
    public List<Estatus> est = new List<Estatus>();

    protected override async Task OnInitializedAsync()
    {
        est.Add(new Estatus() { IdEstatus = 0, Nombre = "Seleccione.." });
        est.Add(new Estatus() { IdEstatus = 1, Nombre = "Activo" });
        est.Add(new Estatus() { IdEstatus = 2, Nombre = "Inactivo" });

        try
        {
            var valor = int.Parse(IdAlmacen);
            if (valor > 0)
            {
                await ObtenerAlmacen();
                Titulo = "Editar Almacen";
            }
        }
        catch (Exception)
        {

        }



    }


    private string FormatoPesos(double value)
    {
        return "$ " + value.ToString("n0");
    }


    private string ParseoPesos(string value)
    {
        return Regex.Replace(value, @"\$\s?|(,*)", "");
    }

    public async Task AddAlmacen()
    {
        await js.InvokeAsync<bool>("confirmarGuardar", "¡Exito al guardar!", "success");
        Console.WriteLine("datos de envio");
        Console.WriteLine(FormAlmacen.Clave);
        Console.WriteLine(FormAlmacen.Nombre);
        await almacenService.AddAlmacen(
            FormAlmacen.Clave,
            FormAlmacen.Nombre,
            FormAlmacen.Alto,
            FormAlmacen.Ancho,
            FormAlmacen.Largo,
            FormAlmacen.Estatus,
            FormAlmacen.Descripcion);
        var arts = await almacenService.GetTodosAlmacenes();
        UriHelper.NavigateTo($"listado-almacenes");
    }

    public async Task ObtenerAlmacen()
    {
        var valor = int.Parse(IdAlmacen);
        var dto = await almacenService.GetAlmacenById(valor);
        FormAlmacen.IdAlmacen = dto.IdAlmacen;
        FormAlmacen.Clave = dto.Clave;
        FormAlmacen.Nombre = dto.Nombre;
        FormAlmacen.Alto = dto.Alto;
        FormAlmacen.Ancho = dto.Ancho;
        FormAlmacen.Largo = dto.Largo;
        FormAlmacen.Estatus = dto.Estatus;
        FormAlmacen.Descripcion = dto.Descripcion;
        Console.WriteLine("dto-------------");
        Console.WriteLine(dto.Nombre);
        if (dto.Estatus == "Activo")
        {
            opcion = "Activo";
        }
        else
        {
            opcion = "Inactivo";
        }
        almacenes.Add(new Almacenn() { IdAlmacen = dto.IdAlmacen, Clave = dto.Clave, Nombre = dto.Nombre, Alto = dto.Alto, Ancho = dto.Ancho, Largo = dto.Largo, Estatus = dto.Estatus, Descripcion = dto.Descripcion });

    }

    public async Task UpdateAlmacen()
    {
        //await almacenService.EditarAlmacen(FormAlmacen);
        await js.InvokeAsync<bool>("confirmarGuardar", "¡Modificación exitosa!", "success");
        await almacenService.UpdateAlmacen(
        FormAlmacen.IdAlmacen,
        FormAlmacen.Clave,
        FormAlmacen.Nombre,
        FormAlmacen.Alto,
        FormAlmacen.Ancho,
        FormAlmacen.Largo,
        FormAlmacen.Estatus,
        FormAlmacen.Descripcion);
        var arts = await almacenService.GetTodosAlmacenes();
        UriHelper.NavigateTo($"listado-almacenes");
    }
    public async Task Cancelar()
    {
        var arts = await almacenService.GetTodosAlmacenes();
        UriHelper.NavigateTo($"listado-almacenes");
    }

    public async Task AgregarAlmacen()
    {
        if (Titulo == "Nuevo Almacen")
        {
            await AddAlmacen();
        }
        else
        {
            await UpdateAlmacen();
        }
    }
}
