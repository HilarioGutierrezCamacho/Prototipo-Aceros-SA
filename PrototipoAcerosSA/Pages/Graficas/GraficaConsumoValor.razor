@page "/grafica-consumo-valor"

@using AntDesign.Charts
@using PrototipoAcerosSA.Data
@using PrototipoAcerosSA.Models
@inject NotificationService _notice
@inject IJSRuntime js
@inject NavigationManager UriHelper

<style>
    .about-section {
        padding: 20px;
        text-align: center;
        background-color: #474e5d;
        color: white;
        width: 100%;
    }
</style>

<div class="about-section">
    <h3 style="color: white;">Grafica de Consumo por Valor</h3>
</div>

<br />
<br />

<Row Gutter="16">
    <Col Span="2">
    <label style="margin: 1px;">Mes Filtro:</label>
    </Col>
    <Col Span="6">
    <DatePicker TValue="DateTime?" @ref="@mesInicio" Picker="@DatePickerType.Month" />
    </Col>
    <!--<Col Span="2">
    <label style="margin: 1px;">Mes Fin:</label>
    </Col>
    <Col Span="6">
    <DatePicker TValue="DateTime?" @ref="@mesFin" Picker="@DatePickerType.Month" />
    </Col>-->
    <Button Type="primary" OnClick="() => FiltrarArticulos()"> Filtrar</Button>
</Row>

<hr />

@if (render)
{
    <AntDesign.Charts.Column Data="data" Config="config" />
}

@code {

    [Inject]
    public IFacturaService FacturaService { get; set; }

    object[] data = new object[1];

    public bool render = false;
    AntDesign.DatePicker<DateTime?> mesInicio = new DatePicker<DateTime?>();
    AntDesign.DatePicker<DateTime?> mesFin = new DatePicker<DateTime?>();

    ColumnConfig config = new ColumnConfig()
    {
        Title = new AntDesign.Charts.Title()
        {
            Visible = false,
            Text = "Grafica de Consumo por Valor",
        },
        Description = new Description()
        {
            Visible = false,
            Text = "Proyecciones de ventas por el valor de cada articulo consumido。",
        },
        Padding = "auto",
        ForceFit = true,
        XField = "articulo",
        YField = "valor"
    };

    protected override async Task OnInitializedAsync()
    {

        int mes = DateTime.Now.Month;
        List<ArticuloValor> articulos = await FacturaService.GetProductosValor(GetMes(mes), "2021");
        articulos = (from articulo in articulos orderby articulo.Valor descending select articulo).ToList();

        data = new object[articulos.Count()];
        for (int i = 0; i < articulos.Count(); i++)
        {
            data[i] = new
            {
                articulo = articulos[i].Nombre,
                valor = articulos[i].Valor
            };
        }
        render = true;
    }

    private string GetMes(int numeroMes)
    {
        string mes = "";
        switch (numeroMes)
        {
            case 1:
                mes = "ENE";
                break;
            case 2:
                mes = "FEB";
                break;
            case 3:
                mes = "MAR";
                break;
            case 4:
                mes = "ABR";
                break;
            case 5:
                mes = "MAY";
                break;
            case 6:
                mes = "JUN";
                break;
            case 7:
                mes = "JUL";
                break;
            case 8:
                mes = "AGO";
                break;
            case 9:
                mes = "SEP";
                break;
            case 10:
                mes = "OCT";
                break;
            case 11:
                mes = "NOV";
                break;
            case 12:
                mes = "DEC";
                break;
        }
        return mes;
    }


    public async Task FiltrarArticulos()
    {
        DateTime? mesIni = mesInicio.Value;
        DateTime? mesFinal = mesFin.Value;
        List<ArticuloValor> articulos = await FacturaService.GetProductosValor(GetMes(mesIni.Value.Month), mesIni.Value.Year.ToString());
        data = new object[articulos.Count()];

        if (articulos.Count() == 0)
        {
            await js.InvokeAsync<bool>("mensajeGenericoValidaciones", "Sin datos.", "El mes ingresado no tiene registros.", "warning");
            render = false;
            return;
        }

        for (int i = 0; i < articulos.Count(); i++)
        {
            data[i] = new
            {
                articulo = articulos[i].Nombre,
                valor = articulos[i].Valor
            };
        }
        render = true;
    }

}
