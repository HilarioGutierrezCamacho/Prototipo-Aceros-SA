@page "/devolver-facturas/{IdFactura}"

@using AntDesign.TableModels
@using System.Text.RegularExpressions
@using PrototipoAcerosSA.Models
@using PrototipoAcerosSA.Data
@inject NotificationService _notice
@inject IJSRuntime js
@inject NavigationManager UriHelper

<style>
    .about-section {
        padding: 20px;
        text-align: center;
        background-color: #474e5d;
        color: white;
        width: 100%;
    }
</style>

<div class="about-section">
    <h3 style="color: white;">Devolver Factura</h3>
</div>

<br />
<div style="background-color: #ececec; padding: 20px;">
    <EditForm Model="@DevolucionForm" OnValidSubmit="@GuardarDevolucion">
        <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator />
        <FluentValidationValidator />
        <Row Gutter="24">
            <Col Span="12">
            <Card Bordered="false" Title=@("Datos Generales")>
                <Body>
                    <div class="form-group row">
                        <label for="lastName" class="col-sm-3">Fecha Devolución: </label>
                        <InputText Disabled="true" id="lastName" class="form-control col-sm-8" @bind-Value="@DevolucionForm.FechaCaptura"></InputText>
                    </div>
                    <div class="form-group row">
                        <label for="lastName" class="col-sm-3">Folio Factura: </label>
                        <InputText Disabled="true" id="lastName" class="form-control col-sm-8" @bind-Value="@DevolucionForm.Factura.FolioFactura" placeholder="Ingresa el folio"></InputText>
                    </div>
                    <div class="form-group row">
                        <label for="lastName" class="col-sm-3">Fecha Factura: </label>
                        <InputText Disabled="true" id="lastName" class="form-control col-sm-8" @bind-Value="@DevolucionForm.Factura.FechaCaptura" placeholder="Ingresa el folio"></InputText>
                    </div>
                    <div class="form-group row">
                        <label for="nombreProveedor" class="col-sm-3">Proveedor: </label>
                        <InputText Disabled="true" id="nombreProveedor" class="form-control col-sm-8" @bind-Value="@DevolucionForm.Factura.Proveedor.Nombre"></InputText>
                    </div>
                    <div class="form-group row">
                        <label for="direccion" class="col-sm-3">Dirección: </label>
                        <InputText Disabled="true" id="direccion" class="form-control col-sm-8" @bind-Value="@DevolucionForm.Factura.Proveedor.Direccion"></InputText>
                    </div>
                    <div class="form-group row">
                        <label for="ciudad" class="col-sm-3">Ciudad: </label>
                        <InputText Disabled="true" id="ciudad" class="form-control col-sm-8" @bind-Value="@DevolucionForm.Factura.Proveedor.Ciudad"></InputText>
                    </div>
                    <div class="form-group row">
                        <label for="cp" class="col-sm-3">CP: </label>
                        <InputText Disabled="true" id="cp" class="form-control col-sm-8" @bind-Value="@DevolucionForm.Factura.Proveedor.CP"></InputText>
                    </div>
                </Body>
                <ActionTemplate>
                    <CardAction>
                        <Button Type="primary" Icon="file-done" Size=@size HtmlType="submit">
                            Guadar
                        </Button>
                    </CardAction>
                    <CardAction>
                        <Button Type="primary" Danger Icon="rollback" Size=@size OnClick="@RegresarListadoFacturas">
                            Cancelar
                        </Button>
                    </CardAction>
                </ActionTemplate>
            </Card>
            </Col>

            <Col Span="12">
            <Card Bordered="false" Title=@("Montos Acumulados")>
                <Body>
                    <div class="form-group row w-75">
                        <label for="subtotal" class="col-sm-4">Subtotal Devolución: </label>
                        <AntDesign.InputNumber Disabled="true" Class="form-control col-sm-8" @bind-Value="@DevolucionForm.Subtotal" Formatter="FormatoPesos" Parser="ParseoPesos" DefaultValue="1000d" />
                    </div>
                    <div class="form-group row w-75">
                        <label for="subtotal" class="col-sm-4">Descuento Devolución: </label>
                        <div class="col-sm-8 p-0">
                            <Input Type="number" @bind-Value="@DevolucionForm.Descuento" OnBlur="() => CalcularDevolucion()" />
                        </div>
                    </div>
                    <div class="form-group row w-75">
                        <label for="subtotal" class="col-sm-4">IVA Devoulción: </label>
                        <div class="col-sm-8 p-0">
                            <Input Disabled="true" Type="number" Class="form-control col-sm-8" @bind-Value="@DevolucionForm.IVA" />
                        </div>
                    </div>
                    <div class="form-group row w-75">
                        <label for="subtotal" class="col-sm-4">Total Devolución: </label>
                        <AntDesign.InputNumber Disabled="true" Class="form-control col-sm-8" @bind-Value="@DevolucionForm.TotalFactura" Formatter="FormatoPesos" Parser="ParseoPesos" DefaultValue="1000d" />
                    </div>
                    <div class="form-group row w-75">
                        <label for="formaPago" class="col-sm-4">Forma Pago: </label>
                        <Select class="col-sm-8" DataSource="@formasPago"
                                DefaultValue="@(0)"
                                @bind-Value="@DevolucionForm.IdFormaPago"
                                ValueName="@nameof(FormaPago.IdFormaPago)"
                                LabelName="@nameof(FormaPago.Descripcion)">
                        </Select>
                    </div>
                    <div class="form-group row">
                        <label for="comentarios" class="col-sm-4">Comentarios: </label>
                        <TextArea Placeholder="Introduce tus comentarios..." Class="form-control col-sm-8" AutoSize="true" @bind-Value="@DevolucionForm.Comentarios" />
                    </div>
                </Body>
            </Card>
            </Col>
        </Row>

        <br />

        <Row Gutter="24">
            <Col Span="24">
            <Card Bordered="false" Title=@("Detalles de la devolución")>
                <Body>

                    <hr />

                    <Table DataSource="@DevolucionForm.DetallesDevolucion" Context="detalle" ScrollX="1000" TItem="DetalleDevolucion" PageSize="5">
                        <AntDesign.Column Title="Clave" TData="string">
                            <Input Disabled="true" Type="text" @bind-Value="@detalle.Articulo.Clave" />
                        </AntDesign.Column>
                        <AntDesign.Column Title="Nombre" TData="string">
                            <Input Disabled="true" Type="text" @bind-Value="@detalle.Articulo.Descripcion" />
                        </AntDesign.Column>
                        <AntDesign.Column Title="Cantidad a Deolver" TData="int">
                            <Input Type="number" @bind-Value="@detalle.CantidadDevolver" OnBlur="() => CalcularTotalDetalle(detalle)" />
                        </AntDesign.Column>
                        <AntDesign.Column Title="Cantidad en Factura" TData="int">
                            <Input Disabled="true" Type="number" @bind-Value="@detalle.CantidadAnterior" />
                        </AntDesign.Column>
                        <AntDesign.Column Title="Precio" TData="float">
                            <Input Disabled="true" Type="number" step="0.01" @bind-Value="@detalle.PrecioUnitario" />
                        </AntDesign.Column>
                        <AntDesign.Column Title="Subtotal" TData="float">
                            <Input Disabled="true" Type="number" step="0.01" @bind-Value="@detalle.Subtotal" />
                        </AntDesign.Column>
                        <AntDesign.Column Title="IVA" TData="float">
                            <Input Disabled="true" Type="number" step="0.01" @bind-Value="@detalle.IVA" />
                        </AntDesign.Column>
                        <AntDesign.Column Title="Total con IVA" TData="float">
                            <Input Disabled="true" Type="number" step="0.01" @bind-Value="@detalle.TotalConIVA" />
                        </AntDesign.Column>
                        <ActionColumn Title="Acciones">
                            <Button Icon="delete" Danger OnClick="() => QuitarFilaDetalle(detalle)">
                                Eliminar
                            </Button>
                        </ActionColumn>
                    </Table>
                </Body>
            </Card>
            </Col>
        </Row>

    </EditForm>
</div>

@code {

    [Inject]
    public IFacturaService FacturaService { get; set; }

    [Inject]
    public IArticuloService ArticuloService { get; set; }

    [Inject]
    public IProveedorService ProveedorService { get; set; }

    [Inject]
    public IFormaPagoService FormaPagoService { get; set; }

    [Inject]
    public IDevolucionService DevolucionService { get; set; }

    [Parameter]
    public string IdFactura { get; set; } = "";

    public DevolverFactura DevolucionForm = new DevolverFactura();
    public List<Unidad> unidades = new List<Unidad>();
    public List<Proveedor> proveedores = new List<Proveedor>();
    public List<FormaPago> formasPago = new List<FormaPago>();

    public string clave_buscar = "";
    public bool ShowModal = false;
    public string MensajeResult = "";
    public bool ShowProveedor = false;
    public int proveedor_selected = 0;
    string size = "large";

    protected override async Task OnInitializedAsync()
    {

        int Id = int.Parse(IdFactura);
        DevolucionForm.FechaCaptura = DateTime.Now.ToString("MM/dd/yyyy H:mm");
        DevolucionForm.Factura = await FacturaService.GetFacturaById(Id);
        DevolucionForm.Comentarios = "";
        DevolucionForm.Subtotal = 0.00;
        DevolucionForm.Descuento = 0.00;
        DevolucionForm.IVA = 0.0;
        DevolucionForm.TotalFactura = 0.00;

        DevolucionForm.Factura.DetallesFactura.ForEach(
            detalleFactura =>
            {
                DetalleDevolucion nuevaFila = new DetalleDevolucion()
                {
                    Articulo = detalleFactura.Articulo,
                    Unidad = detalleFactura.Unidad,
                    PrecioUnitario = detalleFactura.PrecioUnitario,
                    CantidadDevolver = 0,
                    CantidadAnterior = detalleFactura.Cantidad,
                    Subtotal = 0,
                    IVA = detalleFactura.IVA,
                    TotalConIVA = 0
                };
                DevolucionForm.DetallesDevolucion.Add(nuevaFila);
            }    
        );

        proveedores = await ProveedorService.GetTodosProveedores();
        formasPago = await FormaPagoService.GetTodasFormaPago();

        unidades.Add(new Unidad { IdUnidad = 0, Descripcion = "Unidad" });
        unidades.Add(new Unidad { IdUnidad = 1, Descripcion = "Pieza" });
        unidades.Add(new Unidad { IdUnidad = 2, Descripcion = "Caja" });
        unidades.Add(new Unidad { IdUnidad = 3, Descripcion = "Kilo" });

    }

    async void AsignarFormaPago(FormaPago formaPago)
    {
        DevolucionForm.FormaPago = formaPago;
    }

    private void CerrarModal()
    {
        ShowModal = false;
        MensajeResult = "";
    }

    private string FormatoPesos(double value)
    {
        return "$ " + value.ToString("n0");
    }

    private string ParseoPesos(string value)
    {
        return Regex.Replace(value, @"\$\s?|(,*)", "");
    }

    public async Task AgregarFilaDetalle()
    {

        if (clave_buscar == "")
        {
            ShowModal = true;
            MensajeResult = "Introduce la clave del articulo.";
        }
        else
        {

            if (this.EstaDentroDetalles(clave_buscar))
            {
                ShowModal = true;
                MensajeResult = "El articulo ya fue agregado a la lista de detalles.";
            }

            DetalleFactura detalleFactura = this.buscarDetalleFacturaPorIdArticulo(clave_buscar);
            if (detalleFactura != null)
            {
                DetalleDevolucion nuevaFila = new DetalleDevolucion()
                {
                    Articulo = detalleFactura.Articulo,
                    Unidad = detalleFactura.Unidad,
                    PrecioUnitario = detalleFactura.PrecioUnitario,
                    CantidadDevolver = 0,
                    CantidadAnterior = detalleFactura.Cantidad,
                    Subtotal = 0,
                    IVA = detalleFactura.IVA,
                    TotalConIVA = 0
                };
                DevolucionForm.DetallesDevolucion.Add(nuevaFila);
                ShowModal = false;
                MensajeResult = "";

            }
            else
            {
                ShowModal = true;
                MensajeResult = "El articulo no existe dentro de la factura";
            }
        }

        clave_buscar = "";
    }

    public DetalleFactura buscarDetalleFacturaPorIdArticulo(string ClaveArticulo)
    {
        DetalleFactura detalle = null;
        DevolucionForm.Factura.DetallesFactura.ForEach(
            det =>
            {
                if (det.Articulo.Clave == ClaveArticulo)
                {
                    detalle = det;
                }
            }
        );
        return detalle;
    }

    public bool EstaDentroDetalles(string ClaveArticulo)
    {
        bool resultado = false;
        DevolucionForm.DetallesDevolucion.ForEach(
            det =>
            {
                if (det.Articulo.Clave == ClaveArticulo)
                {
                    resultado = true;
                }
            }
        );
        return resultado;
    }

    public async Task QuitarFilaDetalle(DetalleDevolucion articulo)
    {
        foreach (var detalle in DevolucionForm.DetallesDevolucion)
        {
            if (detalle.Articulo.IdArticulo == articulo.Articulo.IdArticulo && detalle.Unidad == articulo.Unidad)
            {
                DevolucionForm.DetallesDevolucion.Remove(detalle);
                break;
            }
        }

        await CalcularDevolucion();
    }

    private async void CalcularTotalDetalle(DetalleDevolucion detalle)
    {
        if (detalle.CantidadDevolver != null && detalle.CantidadDevolver <= 0)
        {
            await js.InvokeAsync<bool>("mensajeGenericoValidaciones", "Cuidado!", "La cantidad debe ser mayor a 0", "warning");
            return;
        }

        if (detalle.CantidadDevolver > detalle.CantidadAnterior)
        {
            await js.InvokeAsync<bool>("mensajeGenericoValidaciones", "Cuidado!", "La cantidad no debe sobrepasar al de la factura.", "warning");
            return;
        }

        detalle.Subtotal = detalle.CantidadDevolver * detalle.PrecioUnitario;

        detalle.TotalConIVA = detalle.Subtotal;

        if (detalle.IVA != null && detalle.IVA > 0)
        {
            detalle.TotalConIVA = detalle.Subtotal + (detalle.Subtotal * detalle.IVA);
        }

        await CalcularDevolucion();

    }

    private async Task CalcularDevolucion()
    {

        if (DevolucionForm.DetallesDevolucion.Count() == 0)
        {
            DevolucionForm.Subtotal = 0;
            DevolucionForm.Descuento = 0;
            DevolucionForm.TotalFactura = 0;
            return;
        }

        DevolucionForm.Subtotal = 0.00;
        var subtotal = 0.00;

        foreach (var detalle in DevolucionForm.DetallesDevolucion)
        {
            DevolucionForm.Subtotal += detalle.TotalConIVA;
            subtotal += detalle.TotalConIVA;
        }

        DevolucionForm.TotalFactura = subtotal;

        DevolucionForm.IVA = 0.00;
        var iva = 0.00;

        foreach (var detalle in DevolucionForm.DetallesDevolucion)
        {
            DevolucionForm.IVA += detalle.IVA;
        }

        var descuento = 0.00;
        if (DevolucionForm.Descuento != null && DevolucionForm.Descuento > 0)
        {
            descuento = DevolucionForm.Descuento;
        }

        DevolucionForm.TotalFactura = DevolucionForm.TotalFactura - descuento;

        if (DevolucionForm.IVA != null && DevolucionForm.IVA > 0)
        {
            DevolucionForm.TotalFactura = DevolucionForm.TotalFactura + (DevolucionForm.TotalFactura * DevolucionForm.IVA);
        }

    }

    private async Task GuardarDevolucion()
    {
        if (DevolucionForm.DetallesDevolucion.Count() <= 0)
        {
            await js.InvokeAsync<bool>("mensajeGenericoValidaciones", "Cuidado!", "Necesitas agregar al menos un articulo a tu devolucion.", "warning");
            return;
        }

        await DevolucionService.GuardarDevolucion(DevolucionForm);
        await js.InvokeAsync<bool>("mensajeExito", "Exito al guardar la devolución");
        UriHelper.NavigateTo($"listado-entradas");

    }

    private async Task RegresarListadoFacturas()
    {
        var confirmResult = await js.InvokeAsync<bool>("confirmarSalirPantalla",
            "¿Deseas salir?", "Se perderan los datos registrados hasta el momento.", "question");
        if (confirmResult)
        {
            UriHelper.NavigateTo($"listado-devoluciones");
        }
    }

}
