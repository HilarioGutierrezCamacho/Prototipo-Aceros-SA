@page "/editar-facturas/{ClaveFactura}"

@using AntDesign.TableModels
@using System.Text.RegularExpressions
@using PrototipoAcerosSA.Models
@using PrototipoAcerosSA.Data
@inject NotificationService _notice
@inject IJSRuntime js
@inject NavigationManager UriHelper

<style>
    .about-section {
        padding: 20px;
        text-align: center;
        background-color: #474e5d;
        color: white;
        width: 100%;
    }
</style>

<div class="about-section">
    <h3 style="color: white;">Captura de Facturas</h3>
</div>

<br />
<div style="background-color: #ececec; padding: 20px;">
    <EditForm Model="@FacturaForm" OnValidSubmit="@GuardarFactura">
        <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator />
        <FluentValidationValidator />
        <Row Gutter="24">
            <Col Span="12">
            <Card Bordered="false" Title=@("Datos Generales")>
                <Body>
                    <div class="form-group row">
                        <label for="lastName" class="col-sm-3">Folio Factura: </label>
                        <InputText Disabled id="lastName" class="form-control col-sm-8" @bind-Value="@FacturaForm.FolioFactura" placeholder="Ingresa el folio"></InputText>
                    </div>
                    <div class="form-group row">
                        <label for="lastName" class="col-sm-3">Fecha Captura: </label>
                        <InputText Disabled id="lastName" class="form-control col-sm-8" @bind-Value="@FacturaForm.FechaCaptura"></InputText>
                    </div>
                    <div class="form-group row">
                        <label for="formaPago" class="col-sm-3">Proveedor: </label>
                        <Select class="col-sm-6" DataSource="@proveedores"
                                @bind-Value="FacturaForm.IdProveedor"
                                ValueName="@nameof(Proveedor.IdProveedor)"
                                LabelName="@nameof(Proveedor.Nombre)"
                                Placeholder="Selecciona un proveedor">
                        </Select>
                        <Button Icon="filter" class="col-sm-2" OnClick="() => AsignarProveedor()">
                        </Button>
                        <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FacturaForm.IdProveedor)" />
                    </div>
                    @if (ShowProveedor)
                    {
                        <div class="form-group row">
                            <label for="nombreProveedor" class="col-sm-3">Proveedor: </label>
                            <InputText Disabled="true" id="nombreProveedor" class="form-control col-sm-8" @bind-Value="@FacturaForm.Proveedor.Nombre"></InputText>
                        </div>
                        <div class="form-group row">
                            <label for="direccion" class="col-sm-3">Dirección: </label>
                            <InputText Disabled="true" id="direccion" class="form-control col-sm-8" @bind-Value="@FacturaForm.Proveedor.Direccion"></InputText>
                        </div>
                        <div class="form-group row">
                            <label for="ciudad" class="col-sm-3">Ciudad: </label>
                            <InputText Disabled="true" id="ciudad" class="form-control col-sm-8" @bind-Value="@FacturaForm.Proveedor.Ciudad"></InputText>
                        </div>
                        <div class="form-group row">
                            <label for="cp" class="col-sm-3">CP: </label>
                            <InputText Disabled="true" id="cp" class="form-control col-sm-8" @bind-Value="@FacturaForm.Proveedor.CP"></InputText>
                        </div>
                    }
                </Body>
                <ActionTemplate>
                    <CardAction>
                        <Button Type="primary" Icon="file-done" Size=@size HtmlType="submit">
                            Guadar
                        </Button>
                    </CardAction>
                    <CardAction>
                        <Button Type="primary" Danger Icon="rollback" Size=@size OnClick="@RegresarListadoFacturas">
                            Cancelar
                        </Button>
                    </CardAction>
                </ActionTemplate>
            </Card>
            </Col>

            <Col Span="12">
            <Card Bordered="false" Title=@("Montos Acumulados")>
                <Body>
                    <div class="form-group row w-75">
                        <label for="subtotal" class="col-sm-4">Subtotal: </label>
                        <AntDesign.InputNumber Disabled="true" Class="form-control col-sm-8" @bind-Value="@FacturaForm.Subtotal" Formatter="FormatoPesos" Parser="ParseoPesos" DefaultValue="1000d" />
                    </div>
                    <div class="form-group row w-75">
                        <label for="subtotal" class="col-sm-4">Descuento: </label>
                        <div class="col-sm-8 p-0">
                            <Input Type="number" @bind-Value="@FacturaForm.Descuento" OnPressEnter="() => CalcularTotalFactura()" />
                        </div>
                    </div>
                    <div class="form-group row w-75">
                        <label for="subtotal" class="col-sm-4">IVA: </label>
                        <div class="col-sm-8 p-0">
                            <Input Disabled="true" Type="number" Class="form-control col-sm-8" @bind-Value="@FacturaForm.IVA" OnPressEnter="() => CalcularTotalFactura()" />
                        </div>
                    </div>
                    <div class="form-group row w-75">
                        <label for="subtotal" class="col-sm-4">Total: </label>
                        <AntDesign.InputNumber Disabled="true" Class="form-control col-sm-8" @bind-Value="@FacturaForm.TotalFactura" Formatter="FormatoPesos" Parser="ParseoPesos" DefaultValue="1000d" />
                    </div>
                    <div class="form-group row w-75">
                        <label for="formaPago" class="col-sm-4">Forma Pago: </label>
                        <Select class="col-sm-8" DataSource="@formasPago"
                                DefaultValue="@(0)"
                                @bind-Value="@FacturaForm.IdFormaPago"
                                ValueName="@nameof(FormaPago.IdFormaPago)"
                                LabelName="@nameof(FormaPago.Descripcion)">
                        </Select>
                        <ValidationMessage class="offset-sm-4 col-sm-8" For="@(() => FacturaForm.IdFormaPago)" />
                    </div>
                    <div class="form-group row">
                        <label for="comentarios" class="col-sm-4">Comentarios: </label>
                        <TextArea Placeholder="Introduce tus comentarios..." Class="form-control col-sm-8" AutoSize="true" @bind-Value="@FacturaForm.Comentarios" />
                    </div>
                </Body>
            </Card>
            </Col>
        </Row>

        <br />

        <Row Gutter="24">
            <Col Span="24">
            <Card Bordered="false" Title=@("Detalles de la factura")>
                <Body>
                    <Row Gutter="24">
                        <Col Span="2">
                        <label style="margin: 1px;">Clave:</label>
                        </Col>
                        <Col Span="3">
                        <Input Type="text" @bind-Value="@clave_buscar" />
                        </Col>
                        <Col Span="5">
                        <Button Type="primary" Style="margin-bottom:16px" OnClick="() => AgregarFilaDetalle()">
                            Agregar
                        </Button>
                        </Col>
                        <Col Span="14">
                        @if (ShowModal)
                        {
                            <Alert Type="@AlertType.Error"
                                   Description="@MensajeResult"
                                   Closable OnClose="CerrarModal" Style="width: 100%" />
                        }
                        </Col>
                    </Row>

                    <hr />

                    <Table DataSource="@FacturaForm.DetallesFactura" Context="detalle" ScrollX="1000" TItem="DetalleFactura" PageSize="5">
                        <AntDesign.Column Title="Clave" @bind-Field="@detalle.Articulo">
                            <label>@detalle.Articulo.Clave</label>
                        </AntDesign.Column>
                        <AntDesign.Column Title="Nombre" @bind-Field="@detalle.Articulo">
                            <label>@detalle.Articulo.Descripcion</label>
                        </AntDesign.Column>
                        <AntDesign.Column Title="Unidad" @bind-Field="@detalle.Unidad" />
                        <AntDesign.Column Title="Cantidad" TData="int">
                            <Input Type="number" @bind-Value="@detalle.Cantidad" OnPressEnter="() => CalcularTotalDetalle(detalle)" OnBlur="() => CalcularTotalDetalle(detalle)" />
                        </AntDesign.Column>
                        <AntDesign.Column Title="Precio" TData="float">
                            <Input Type="number" step="0.01" @bind-Value="@detalle.PrecioUnitario" />
                        </AntDesign.Column>
                        <AntDesign.Column Title="Subtotal" TData="float">
                            <Input Type="number" Disabled="true" step="0.01" @bind-Value="@detalle.Subtotal" />
                        </AntDesign.Column>
                        <AntDesign.Column Title="IVA" TData="float">
                            <Input Type="number" Disabled="true" step="0.01" @bind-Value="@detalle.IVA" OnPressEnter="() => CalcularTotalDetalle(detalle)" />
                        </AntDesign.Column>
                        <AntDesign.Column Title="Total con IVA" TData="float">
                            <Input Type="number" Disabled="true" step="0.01" @bind-Value="@detalle.TotalConIVA" />
                        </AntDesign.Column>
                        <ActionColumn Title="Acciones">
                            <Button Icon="delete" Danger OnClick="() => QuitarFilaDetalle(detalle)">
                                Eliminar
                            </Button>
                        </ActionColumn>
                    </Table>
                </Body>
            </Card>
            </Col>
        </Row>

    </EditForm>
</div>

@code {

    public class Unidad
    {
        public int IdUnidad { get; set; }
        public string Descripcion { get; set; }
    }

    [Inject]
    public IArticuloService ArticuloService { get; set; }

    [Inject]
    public IProveedorService ProveedorService { get; set; }

    [Inject]
    public IFormaPagoService FormaPagoService { get; set; }

    [Inject]
    public IFacturaService FacturaService { get; set; }

    [Parameter]
    public string ClaveFactura { get; set; } = "";


    public Factura FacturaForm { get; set; } = new Factura();
    public List<DetalleFactura> detallesDefault = new List<DetalleFactura>();
    public List<Unidad> unidades = new List<Unidad>();
    public List<Proveedor> proveedores = new List<Proveedor>();
    public List<FormaPago> formasPago = new List<FormaPago>();

    public string clave_buscar = "";
    public bool ShowModal = false;
    public string MensajeResult = "";
    public bool ShowProveedor = false;
    string size = "large";

    protected override async Task OnInitializedAsync()
    {

        FacturaForm = await FacturaService.GetFacturaByClave(ClaveFactura);

        proveedores = await ProveedorService.GetTodosProveedores();
        formasPago = await FormaPagoService.GetTodasFormaPago();

        unidades.Add(new Unidad { IdUnidad = 0, Descripcion = "Unidad" });
        unidades.Add(new Unidad { IdUnidad = 1, Descripcion = "Pieza" });
        unidades.Add(new Unidad { IdUnidad = 2, Descripcion = "Caja" });
        unidades.Add(new Unidad { IdUnidad = 3, Descripcion = "Kilo" });

    }

    public async Task AgregarFilaDetalle()
    {
        if (FacturaForm.IdProveedor == 0 || FacturaForm.Proveedor.IdProveedor == 0)
        {
            await js.InvokeAsync<bool>("mensajeGenericoValidaciones", "Cuidado!", "Necesitas seleccionar el proveedor de la factura para aplicar los I.V.A.", "warning");
            return;
        }

        if (clave_buscar == "")
        {
            ShowModal = true;
            MensajeResult = "Introduce la clave del articulo.";
        }
        else
        {
            Articulo nuevoArticulo = await ArticuloService.GetArticuloByClave(clave_buscar);
            if (nuevoArticulo != null)
            {
                DetalleFactura nuevaFila = new DetalleFactura()
                {
                    Articulo = nuevoArticulo,
                    Unidad = nuevoArticulo.Unidad.Nombre,
                    PrecioUnitario = nuevoArticulo.PrecioUnitario,
                    Cantidad = 0,
                    Subtotal = 0,
                    IVA = FacturaForm.Proveedor.IVA,
                    TotalConIVA = 0
                };
                FacturaForm.DetallesFactura.Add(nuevaFila);
                ShowModal = false;
                MensajeResult = "";

            }
            else
            {
                ShowModal = true;
                MensajeResult = "El articulo no existe o esta inactivo";
            }
        }

        clave_buscar = "";
    }

    public async Task QuitarFilaDetalle(DetalleFactura articulo)
    {
        foreach (var detalle in FacturaForm.DetallesFactura)
        {
            if (detalle.Articulo.IdArticulo == articulo.Articulo.IdArticulo && detalle.Unidad == articulo.Unidad)
            {
                FacturaForm.DetallesFactura.Remove(detalle);
                break;
            }
        }

        await CalcularTotalFactura();
    }

    public async void AsignarProveedor()
    {
        if (FacturaForm.IdProveedor != 0)
        {
            FacturaForm.Proveedor = await ProveedorService.GetProveedorById(FacturaForm.IdProveedor);
            ShowProveedor = true;
            this.ShouldRender();
        }
        else
        {
            FacturaForm.Proveedor = new Proveedor();
            ShowProveedor = false;
        }
    }

    private void CerrarModal()
    {
        ShowModal = false;
        MensajeResult = "";
    }

    private string FormatoPesos(double value)
    {
        return "$ " + value.ToString("n0");
    }

    private string ParseoPesos(string value)
    {
        return Regex.Replace(value, @"\$\s?|(,*)", "");
    }

    private async Task CalcularTotalFactura()
    {

        if (FacturaForm.DetallesFactura.Count() == 0)
        {
            FacturaForm.Subtotal = 0;
            FacturaForm.Descuento = 0;
            FacturaForm.TotalFactura = 0;
            return;
        }

        FacturaForm.Subtotal = 0.00;
        var subtotal = 0.00;

        foreach (var detalle in FacturaForm.DetallesFactura)
        {
            FacturaForm.Subtotal += detalle.TotalConIVA;
            subtotal += detalle.TotalConIVA;
        }

        FacturaForm.TotalFactura = subtotal;

        FacturaForm.IVA = 0.00;
        var iva = 0.00;

        foreach (var detalle in FacturaForm.DetallesFactura)
        {
            FacturaForm.IVA += detalle.IVA;
        }

        var descuento = 0.00;
        if (FacturaForm.Descuento != null && FacturaForm.Descuento > 0)
        {
            descuento = FacturaForm.Descuento;
        }

        FacturaForm.TotalFactura = FacturaForm.TotalFactura - descuento;

        if (FacturaForm.IVA != null && FacturaForm.IVA > 0)
        {
            FacturaForm.TotalFactura = FacturaForm.TotalFactura + (FacturaForm.TotalFactura * FacturaForm.IVA);
        }

    }

    private async void CalcularTotalDetalle(DetalleFactura detalle)
    {
        if (detalle.Cantidad != null && detalle.Cantidad <= 0)
        {
            await js.InvokeAsync<bool>("mensajeGenericoValidaciones", "Cuidado!", "La cantidad debe ser mayor a 0.", "warning");
            return;
        }

        detalle.Subtotal = detalle.Cantidad * detalle.PrecioUnitario;

        detalle.TotalConIVA = detalle.Subtotal;

        if (detalle.IVA != null && detalle.IVA > 0)
        {
            detalle.TotalConIVA = detalle.Subtotal + (detalle.Subtotal * detalle.IVA);
        }

        await CalcularTotalFactura();

    }

    private async Task GuardarFactura()
    {
        if (FacturaForm.DetallesFactura.Count() <= 0)
        {
            await js.InvokeAsync<bool>("mensajeGenericoValidaciones", "Cuidado!", "Necesitas agregar al menos un articulo a tu factura.", "warning");
            return;
        }

        await FacturaService.EditarFactura(FacturaForm);
        await js.InvokeAsync<bool>("mensajeExito", "Exito al editar la factura");
        UriHelper.NavigateTo($"listado-entradas");

    }

    private async Task RegresarListadoFacturas()
    {
        var confirmResult = await js.InvokeAsync<bool>("confirmarSalirPantalla",
            "¿Deseas salir?", "Se perderan los datos registrados hasta el momento.", "question");
        if (confirmResult)
        {
            UriHelper.NavigateTo($"listado-entradas");
        }
    }

}
